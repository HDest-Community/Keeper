version "4.0"

class KeeperHandler : EventHandler
{
	override void PlayerDied(PlayerEvent e)
	{
		let plr = HDPlayerPawn(players[e.PlayerNumber].mo);
		if (plr)
		{
			let Restorer = StatRestorer(plr.GiveInventoryType('StatRestorer'));
			if (Restorer)
			{
				Restorer.Blues = int(plr.CountInv('HDBlues') * clamp(keeper_percent_blues, 0, 1.0));
				Restorer.Burns = int(plr.burncount * clamp(keeper_percent_burns, 0, 1.0));
				Restorer.Aggro = int(plr.aggravateddamage * clamp(keeper_percent_aggro, 0, 1.0));
				Restorer.Bloodloss = int(plr.bloodloss * clamp(keeper_percent_blood, 0, 1.0));
			}
		}
	}
}

// [Ace] Defer restoring stats a few tics later otherwise the player's OnRespawn virtual will clear everything you do in PlayerRespawned.
class StatRestorer : Inventory
{
	override void DoEffect()
	{
		let plr = HDPlayerPawn(owner);
		if (plr && plr.Health > 0 && ++AliveTicker > 2)
		{
			plr.A_GiveInventory('HDBlues', Blues);
			plr.aggravateddamage = Aggro;
			plr.burncount = Burns;
			plr.bloodloss += Bloodloss; // [Ace] Add to PoF's bloodloss.

			Destroy();
			return;
		}

		Super.DoEffect();
	}

	int AliveTicker;

	int Blues;
	int Aggro;
	int Burns;
	int Bloodloss;

	Default
	{
		Inventory.MaxAmount 1;
	}
}